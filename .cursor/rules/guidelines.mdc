---
description: 
globs: 
alwaysApply: true
---
# Vivid Actor Framework 开发规范

## 1. 项目架构理念

### 1.1 核心设计原则

**Actor 模型优先**：
- 所有并发操作基于 Actor 模型实现
- 通过消息传递实现组件间通信
- 避免共享状态，使用消息传递同步数据
- 每个 Actor 拥有独立的状态和生命周期

**接口驱动设计**：
- 优先定义接口，后实现具体功能
- 通过接口组合扩展功能，避免修改现有接口
- 使用类型断言检查可选功能实现
- 保持接口职责单一，易于测试和扩展

**配置器模式**：
- 所有组件支持灵活的配置方式
- 同时提供选项模式、配置器模式、配置对象三种构造方式
- 配置支持链式调用和函数式组合
- 提供合理的默认值，简化使用

### 1.2 包结构规范

```
engine/v1/
├── *.go                    // 公共 API 接口（Actor、ActorSystem、ActorRef 等）
├── internal/               // 内部实现，外部不可访问
│   ├── processor/         // 处理单元系统（Registry、Unit、RPC）
│   ├── builtinfuture/     // Future 实现
│   └── builtin*/          // 其他内置实现
├── processor/             // 处理器公共接口
├── future/                // Future 接口定义
├── mailbox/               // 邮箱接口定义
├── metrics/               // 指标系统
└── */                     // 其他功能模块接口
```

**强制规则**：
- 公共 API 必须在包根目录或专门的接口包中定义
- 具体实现必须放在 `internal` 包中，确保封装性
- 每个功能模块独立子包，避免循环依赖
- 使用 `internal` 包隐藏实现细节，保持 API 稳定

### 1.3 文件命名规范

```
actor.go                 // 核心接口定义
actor_system.go          // 系统级接口
actor_context.go         // 上下文实现
*_config.go             // 配置相关文件
*_test.go              // 单元测试文件
standard_*.go          // 标准实现
builtin*.go           // 内置实现
errors.go             // 错误定义
messages.go           // 消息类型定义
```

## 2. Actor 系统设计规范

### 2.1 Actor 接口设计

```go
// 核心 Actor 接口 - 职责单一
type Actor interface {
    Receive(ctx ActorContext)
}

// 功能扩展接口 - 通过组合扩展
type ActorInitializer interface {
    Actor
    OnLaunch(ctx ActorContext)
}

type ActorFinalizer interface {
    Actor
    OnKill(ctx ActorContext, message *OnKill)
}

// 函数式 Actor - 简化实现
type ActorFN func(ctx ActorContext)
func (fn ActorFN) Receive(ctx ActorContext) { fn(ctx) }
```

**强制规则**：
- Actor 接口保持最小化，只包含 `Receive` 方法
- 生命周期方法通过独立接口定义，支持可选实现
- 提供函数式 Actor 支持，简化简单场景的使用
- 使用类型断言检查 Actor 的扩展能力

### 2.2 消息传递模式

```go
// Tell - 单向消息发送
ctx.Tell(targetRef, message)

// Ask - 请求-响应模式
future := ctx.Ask(targetRef, message, timeout)
result, err := future.Result()

// Probe - 探测式消息
ctx.Probe(targetRef, message)  // 接收方可选择回复

// Reply - 回复当前消息
ctx.Reply(response)

// Broadcast - 广播消息
ctx.Broadcast([]ActorRef{ref1, ref2}, message)
```

**强制规则**：
- Tell 用于单向通知，不期望回复
- Ask 用于需要回复的场景，必须设置超时
- Probe 用于可选回复的场景
- Reply 只能在消息处理过程中使用
- 避免在 Actor 内部直接调用其他 Actor 的方法

### 2.3 生命周期管理

```go
// 生命周期消息
type OnLaunch struct{}    // Actor 启动
type OnRestart struct{}   // Actor 重启
type OnKill struct {      // Actor 终止
    Reason string
}

// 生命周期接口
type ActorLifecycle interface {
    OnLaunch(ctx ActorContext)
    OnRestart(ctx ActorContext) 
    OnKill(ctx ActorContext, message *OnKill)
}
```

**强制规则**：
- 生命周期方法通过独立接口定义
- 生命周期消息不经过邮箱，直接处理
- OnKill 处理中的异常不会触发监管策略
- 重启会清除 Actor 状态，重新初始化

## 3. 监管策略规范

### 3.1 监管指令定义

```go
// 监管指令
var (
    DirectiveRestart     SupervisorDirective  // 重启 Actor
    DirectiveKill        SupervisorDirective  // 立即终止
    DirectivePoisonKill  SupervisorDirective  // 优雅终止
    DirectiveResume      SupervisorDirective  // 恢复运行
    DirectiveEscalate    SupervisorDirective  // 上报错误
)

// 监管者接口
type Supervisor interface {
    Strategy(fatal *Fatal) SupervisorDirective
}
```

**强制规则**：
- 监管策略基于错误类型和上下文决定
- 支持退避重启，避免频繁重启
- 提供标准监管者实现，支持自定义策略
- 监管决策应该快速执行，避免阻塞

### 3.2 错误处理机制

```go
// 错误恢复机制
func (ctx *actorContext) onReceiveWithRecover() (recovered bool) {
    defer func() {
        if r := recover(); r != nil {
            switch ctx.message.(type) {
            case *OnKill:
                // OnKill 中的异常不作为致命错误
                ctx.Logger().Error("panic in OnKill", log.Any("reason", r))
                return
            default:
                recovered = true
                ctx.fatal = newFatal(ctx, ctx.ref, ctx.message, r, debug.Stack())
                ctx.handleFatal(ctx.fatal)
            }
        }
    }()
    ctx.actor.Receive(ctx)
    return
}
```

**强制规则**：
- 所有 Actor 消息处理都包装在 recover 中
- OnKill 消息处理中的异常不触发监管策略
- 错误信息包含完整的上下文和堆栈
- 支持自定义错误处理逻辑

## 4. 配置管理规范

### 4.1 配置器模式实现

```go
// 配置结构体
type ActorSystemConfiguration struct {
    Logger               log.Logger
    FutureDefaultTimeout time.Duration
    Hooks                []Hook
    Metrics              bool
}

// 链式配置方法
func (c *ActorSystemConfiguration) WithLogger(logger log.Logger) *ActorSystemConfiguration {
    c.Logger = logger
    return c
}

// 函数式配置选项
func WithActorSystemLogger(logger log.Logger) ActorSystemOption {
    return func(c *ActorSystemConfiguration) {
        c.WithLogger(logger)
    }
}

// 多种构造方式
func NewActorSystemWithOptions(options ...ActorSystemOption) ActorSystem
func NewActorSystemWithConfigurators(configurators ...ActorSystemConfigurator) ActorSystem
func NewActorSystemFromConfig(config *ActorSystemConfiguration) ActorSystem
```

**强制规则**：
- 必须同时提供链式和函数式两种配置方式
- 配置方法使用 `With` 前缀，返回配置对象本身
- 提供三种构造函数：选项模式、配置器模式、配置对象
- 在构造函数中设置合理的默认值

### 4.2 类型别名规范

```go
// 配置相关类型别名
type (
    ActorSystemConfigurator = configurator.Configurator[*ActorSystemConfiguration]
    ActorSystemConfiguratorFN = configurator.FN[*ActorSystemConfiguration]
    ActorSystemOption = configurator.Option[*ActorSystemConfiguration]
)
```

**强制规则**：
- 使用类型别名简化复杂的泛型类型
- 配置器、选项、配置函数使用统一的命名模式
- 利用外部 configurator 包提供通用配置能力

## 5. 并发安全规范

### 5.1 原子操作使用

```go
type actorContext struct {
    // 状态管理
    state     atomic.Uint32
    restarting atomic.Bool
    
    // 计数器
    messageCount atomic.Int64
    
    // 指针类型
    fatal atomic.Pointer[*Fatal]
}

// 状态切换
func (ctx *actorContext) setState(newState uint32) bool {
    return ctx.state.CompareAndSwap(stateRunning, newState)
}
```

**强制规则**：
- 状态字段使用 `atomic` 包类型
- 状态切换使用 `CompareAndSwap` 操作
- 计数器使用 `atomic.Int64` 等原子类型
- 指针字段使用 `atomic.Pointer[T]`

### 5.2 无锁数据结构

```go
// 使用高性能的并发安全数据结构
type registry struct {
    units    *xsync.MapOf[string, processor.Unit]
    remotes  map[string][]processor.RPCConn
    shutdown atomic.Bool
}

// 避免全局锁
func (r *registry) GetUnit(id processor.UnitIdentifier) (processor.Unit, error) {
    if unit, loaded := r.units.Load(id.GetPath()); loaded {
        return unit, nil
    }
    return r.getDaemon()
}
```

**强制规则**：
- 优先使用 `xsync.MapOf` 替代 `sync.Map`
- 避免使用全局读写锁
- 使用细粒度锁或无锁算法
- 关键路径避免锁竞争

## 6. 网络通信规范

### 6.1 RPC 抽象设计

```go
// 连接抽象
type RPCConn interface {
    Send(data []byte) error
    Recv() ([]byte, error)
    Close() error
    RemoteAddr() string
}

// 服务器抽象
type RPCServer interface {
    Listen(address string) error
    Accept() (RPCConn, error)
    Close() error
}

// 序列化抽象
type NameSerializer interface {
    Serialize(data any) (typeName string, serializedData []byte, err error)
    Deserialize(typeName string, serializedData []byte) (result any, err error)
}
```

**强制规则**：
- 网络层完全抽象化，支持多种传输协议
- 序列化协议可插拔，支持不同格式
- 连接管理与业务逻辑分离
- 支持连接池和负载均衡

### 6.2 批处理优化

```go
// 批处理消息发送
type rpcUnit struct {
    queue      *queue.Queue[*rpcUnitMessage]
    batchSize  int
    status     atomic.Uint32
}

func (r *rpcUnit) flush() {
    defer atomic.StoreUint32(&r.status, rpcUnitIdle)
    
    for r.batchPack() {
        // 继续处理队列中的消息
    }
}

func (r *rpcUnit) batchPack() bool {
    batch := make([]*rpcUnitMessage, 0, r.batchSize)
    
    // 批量收集消息
    for len(batch) < r.batchSize {
        if msg := r.queue.Pop(); msg != nil {
            batch = append(batch, msg)
        } else {
            break
        }
    }
    
    if len(batch) > 0 {
        r.sendBatch(batch)
        return true
    }
    return false
}
```

**强制规则**：
- 网络消息必须批处理发送
- 使用无锁队列缓存消息
- 动态调整批处理大小
- 队列为空时立即发送，避免延迟

## 7. 错误处理规范

### 7.1 错误定义规范

```go
// 包级别错误定义
var (
    ErrActorSystemShutdown = errors.New("actor system has been shutdown")
    ErrActorNotFound      = errors.New("actor not found")
    ErrInvalidActorRef    = errors.New("invalid actor reference")
    ErrMessageTimeout     = errors.New("message timeout")
)

// 错误类型别名
type Error = error
```

**强制规则**：
- 包级别错误以 `Err` 开头
- 错误名格式：`Err{组件名}{错误类型}`
- 错误信息使用小写，简洁明确
- 统一在 `errors.go` 文件中定义

### 7.2 错误处理策略

```go
// 分层错误处理
func (system *actorSystem) ActorOf(provider ActorProvider, options ...ActorOption) ActorRef {
    // 参数验证
    if provider == nil {
        system.Logger().Error("ActorOf", log.String("error", "provider is nil"))
        return deadLetterRef
    }
    
    // 创建 Actor
    ref, err := system.createActor(provider, options...)
    if err != nil {
        system.Logger().Error("ActorOf", log.Err(err))
        return deadLetterRef
    }
    
    return ref
}
```

**强制规则**：
- 优先返回具体错误，而非通用错误
- 实现回退机制，避免直接失败
- 错误日志包含足够的上下文信息
- 使用 `errors.Is()` 进行错误类型判断

## 8. 测试规范

### 8.1 测试文件组织

```go
// 测试文件命名：*_test.go
func TestActorSystemActorOf(t *testing.T) {
    // Arrange
    system := NewActorSystem().StartP()
    defer system.StopP()
    
    provider := ActorProviderFN(func() Actor {
        return ActorFN(func(ctx ActorContext) {
            // Actor 实现
        })
    })
    
    // Act
    ref := system.ActorOf(provider)
    
    // Assert
    assert.NotNil(t, ref)
    assert.NotEqual(t, deadLetterRef, ref)
}
```

**强制规则**：
- 测试方法名格式：`Test{组件名}{方法名}`
- 使用 AAA 模式：Arrange、Act、Assert
- 每个测试只验证一个场景
- 测试要能独立运行，不依赖外部状态

### 8.2 基准测试

```go
func BenchmarkActorSystemTell(b *testing.B) {
    system := NewActorSystem().StartP()
    defer system.StopP()
    
    ref := system.ActorOf(ActorProviderFN(func() Actor {
        return ActorFN(func(ctx ActorContext) {
            // 简单的消息处理
        })
    }))
    
    b.ResetTimer()
    b.RunParallel(func(pb *testing.PB) {
        for pb.Next() {
            system.Tell(ref, "test message")
        }
    })
}
```

**强制规则**：
- 基准测试名格式：`Benchmark{组件名}{方法名}`
- 使用 `b.RunParallel` 测试并发性能
- 测试前调用 `b.ResetTimer()` 排除初始化时间
- 关注内存分配和 GC 压力

## 9. 文档规范

### 9.1 Go Doc 注释

```go
// ActorSystem 定义了 Actor 系统的核心接口。
//
// Actor 系统是 Actor 的容器和管理者，负责 Actor 的创建、监督和消息传递。
// 一个应用程序通常只有一个 ActorSystem 实例。
//
// 主要功能：
//   - Actor 生命周期管理
//   - 消息路由和传递
//   - 监管策略执行
//   - 系统级服务提供
//
// 使用示例：
//   system := vivid.NewActorSystem().StartP()
//   defer system.StopP()
//   
//   ref := system.ActorOf(provider)
//   system.Tell(ref, message)
type ActorSystem interface {
    // ActorOf 创建新的 Actor 实例。
    //
    // 参数 provider 用于创建 Actor 实例，options 用于配置 Actor 行为。
    // 返回 Actor 的引用，可用于消息发送。
    //
    // 如果创建失败，返回 deadLetterRef，消息会被发送到死信队列。
    ActorOf(provider ActorProvider, options ...ActorOption) ActorRef
}
```

**强制规则**：
- 接口注释说明职责、功能和使用场景
- 方法注释包含参数说明、返回值说明和使用示例
- 使用中文注释，英文单词和数字与中文之间加空格
- 重要的接口提供完整的使用示例

### 9.2 中文注释规范

```go
// Package vivid 提供了基于 Actor 模型的并发编程框架。
//
// Vivid 是一个高性能、类型安全的 Actor 系统实现，支持：
//   - 轻量级 Actor 并发模型
//   - 强大的监管和容错机制  
//   - 灵活的消息传递模式
//   - 分布式 Actor 通信
//   - 丰富的定时器功能
package vivid
```

**强制规则**：
- 使用简体中文编写注释
- 英文单词、数字和中文之间使用空格分隔
- 专业术语保持英文原文（如 Actor、RPC）
- 注释风格自然，适当使用换行和列表

## 10. 性能优化规范

### 10.1 内存管理

```go
// 对象池复用
var messagePool = sync.Pool{
    New: func() interface{} {
        return &Message{}
    },
}

// 获取消息对象
func getMessage() *Message {
    return messagePool.Get().(*Message)
}

// 归还消息对象
func putMessage(msg *Message) {
    msg.Reset()
    messagePool.Put(msg)
}
```

**强制规则**：
- 频繁创建的对象使用对象池
- 大对象复用，避免频繁分配
- 及时释放不需要的引用
- 监控内存使用和 GC 压力

### 10.2 热路径优化

```go
// 避免在热路径中进行复杂操作
func (ctx *actorContext) Tell(target ActorRef, message Message) {
    // 快速路径：本地 Actor
    if localRef, ok := target.(*localActorRef); ok {
        localRef.mailbox.Push(message)
        return
    }
    
    // 慢路径：远程 Actor 或特殊处理
    ctx.tellSlow(target, message)
}
```

**强制规则**：
- 识别热路径，优先优化高频操作
- 避免在热路径中分配内存
- 使用类型断言优化常见情况
- 延迟复杂操作到慢路径

## 11. 监控和指标

### 11.1 指标定义

```go
// 指标名称常量
const (
    MetricActorMailboxSize     = "actor_mailbox_size"
    MetricMessageHandledTotal  = "message_handled_total"
    MetricActorLaunchedTotal   = "actor_launched_total"
    MetricActorRestartTotal    = "actor_restart_total"
)

// 指标收集
type actorSystemMetrics struct {
    manager metrics.Manager
}

func (m *actorSystemMetrics) OnActorLaunched(ref ActorRef) {
    m.manager.Counter(MetricActorLaunchedTotal,
        metrics.WithTag("ref", ref.GetPath()),
    ).Inc()
}
```

**强制规则**：
- 定义标准的指标名称常量
- 使用结构化的标签系统
- 监控关键业务指标和性能指标
- 提供指标导出接口

### 11.2 日志记录

```go
// 结构化日志
func (system *actorSystem) createActor(provider ActorProvider) (ActorRef, error) {
    logger := system.Logger().With(
        "operation", "create_actor",
        "provider", fmt.Sprintf("%T", provider),
    )
    
    logger.Debug("creating actor")
    
    ref, err := system.doCreateActor(provider)
    if err != nil {
        logger.Error("failed to create actor", log.Err(err))
        return nil, err
    }
    
    logger.Info("actor created", log.String("ref", ref.GetPath()))
    return ref, nil
}
```

**强制规则**：
- 使用结构化日志记录关键操作
- 包含足够的上下文信息
- 区分不同日志级别
- 避免在热路径中记录过多日志

## 12. 版本兼容性

### 12.1 API 演进

```go
// 正确：通过接口扩展增加功能
type ActorMetrics interface {
    Actor
    GetMetrics() Metrics
}

// 错误：修改现有接口
type Actor interface {
    Receive(ctx ActorContext)
    GetMetrics() Metrics  // 破坏兼容性
}
```

**强制规则**：
- 不修改现有公共接口
- 通过接口组合扩展功能
- 新增配置选项必须可选
- 废弃功能使用 `// Deprecated:` 标记

### 12.2 向后兼容

```go
// 保持默认行为不变
func NewActorSystem(options ...ActorSystemOption) ActorSystem {
    config := NewActorSystemConfiguration(options...)
    
    // 确保默认行为与之前版本一致
    if config.Logger == nil {
        config.Logger = log.GetDefault()
    }
    
    return newActorSystem(config)
}
```

**强制规则**：
- 保持默认行为不变
- 新功能通过可选配置启用
- 提供迁移指南和示例
- 充分测试兼容性

这份规范涵盖了 vivid 项目的核心设计理念和实践，确保代码质量和一致性。 
package actor

import (
	"github.com/kercylan98/chrono/timing"
	"time"
)

// TimingContext 定义了一个用于管理和调度各类定时任务的接口。
// 该接口提供了创建一次性延迟任务、循环任务、无限循环任务以及基于 CRON 表达式的定时任务的能力，
// 并支持对这些任务进行精确控制，包括停止单个任务或清除所有任务。
type TimingContext interface {
	// After 在指定的延迟时间后执行一次性任务。
	//
	// 通过 name 参数为任务提供唯一标识，同名任务会自动覆盖前序实例。
	// duration 参数指定任务执行前的等待时间。
	// task 参数定义实际执行的任务逻辑，其类型为 timing.Task。
	//
	// 特殊行为说明：
	//  - 同名任务的覆盖机制会取消先前的任务，确保只有最新注册的任务会被执行
	//  - 任务执行采用异步方式，不会阻塞调用线程
	//  - 任务执行完成后会自动释放相关资源
	//
	// 使用建议：
	// 适用于需要延迟执行的一次性操作，如延迟消息发送、状态更新等场景。
	After(name string, duration time.Duration, task timing.Task)

	// Loop 创建一个在指定次数内循环执行的定时任务。
	//
	// name 参数为任务提供唯一标识，同名任务会自动覆盖前序实例。
	// duration 参数指定首次执行前的延迟时间。
	// interval 参数定义连续执行之间的时间间隔。
	// times 参数指定任务执行的总次数，执行完毕后任务将被自动移除。
	// task 参数定义实际执行的任务逻辑，其类型为 timing.Task。
	//
	// 特殊行为说明：
	//  - 当 times 参数小于或等于 0 时，任务将不会执行
	//  - 任务执行采用异步方式，每次迭代都在单独的协程中运行
	//  - 同名任务注册会导致先前的循环任务被取消，无论其完成状态
	//
	// 性能考虑：
	// 在高频循环场景下，建议合理设置 interval 以避免资源过度消耗。
	Loop(name string, duration, interval time.Duration, times int, task timing.Task)

	// ForeverLoop 创建一个无限循环执行的定时任务。
	//
	// name 参数为任务提供唯一标识，同名任务会自动覆盖前序实例。
	// duration 参数指定首次执行前的延迟时间。
	// interval 参数定义连续执行之间的时间间隔。
	// task 参数定义实际执行的任务逻辑，其类型为 timing.Task。
	//
	// 特殊行为说明：
	//  - 任务将持续执行，直到被显式停止或上下文被清除
	//  - 每次迭代都在单独的协程中异步执行，不会阻塞主线程
	//  - 同名任务注册会导致先前的循环任务被取消并替换
	//
	// 资源管理：
	//  - 由于任务会无限执行，请确保在不再需要时调用 Stop 或 Clear 方法释放资源
	//  - 在高频循环场景下，建议监控系统资源使用情况，避免协程过度创建
	ForeverLoop(name string, duration, interval time.Duration, task timing.Task)

	// Cron 使用 cron 表达式调度指定任务，根据预定的时间触发其执行。
	//
	// 调度方式由 cron 参数中描述的标准 CRON 格式表达式决定，支持秒级粒度的时间设置。
	// name 参数用来标识任务，同名任务会自动覆盖前序实例。
	// task 参数指定实际执行的任务逻辑，其类型为 timing.Task。
	//
	// 特殊行为说明：
	//  - 如果 CRON 表达式无效，将返回错误，任务不会被创建
	//  - 同名任务的覆盖机制会使前序未完成的任务被安全取消，并确保新的任务接替队列位置
	//  - 触发时间可能会受到系统时间调整的影响，建议在时间同步机制稳定的环境中使用
	//
	// 性能考虑：
	//  - 异步机制采用协程启动任务，以保障调度的低延迟与高效性能
	//  - 在高频任务场景下，建议注意任务密度，避免耗时任务阻塞队列
	Cron(name string, cron string, task timing.Task) error

	// Stop 停止具有指定名称的任务，并释放相关资源。
	//
	// 通过指定的任务名称 name，立即终止对应任务的调度与执行，无论其当前状态。
	// 若任务正处于执行中，通常不会中断正在运行的操作，但后续的调度步骤将被取消。
	// 如果指定的名称未匹配任何现有任务，则不会进行任何操作。
	//
	// 特殊行为说明：
	//  - 同名任务替换时，仅对替换后的最新任务实例生效
	//  - 被终止的任务不会触发额外的关闭回调或清理步骤，需自行管理相关依赖资源
	//
	// 并发机制说明：
	//  - Stop 方法是线程安全的，可在多协程环境下安全调用
	Stop(name string)

	// Clear 清除当前上下文中所有正在运行或调度中的定时任务。
	//
	// 该方法会终止所有已注册任务，无论其当前状态是正在执行、等待开始还是处于循环调度中。
	// 此操作不可逆，清除后的任务需重新注册才能再次使用。
	// 被终止的任务不会触发任何后续操作，例如回调或完成状态标识。
	//
	// 特殊行为说明：
	//  - 清除操作会立即释放所有相关资源，包括任务队列和调度器
	//  - 正在执行的任务不会被强制终止，但后续调度将被取消
	//  - 并发任务的清除与调度器通信时可能存在一定的异步延迟
	//
	// 使用建议：
	//  - 在主动释放资源或重置定时器时，建议调用此方法以避免协程泄露
	Clear()
}

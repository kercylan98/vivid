// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VividServiceClient is the client API for VividService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VividServiceClient interface {
	OpenMessageStream(ctx context.Context, opts ...grpc.CallOption) (VividService_OpenMessageStreamClient, error)
}

type vividServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVividServiceClient(cc grpc.ClientConnInterface) VividServiceClient {
	return &vividServiceClient{cc}
}

func (c *vividServiceClient) OpenMessageStream(ctx context.Context, opts ...grpc.CallOption) (VividService_OpenMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &VividService_ServiceDesc.Streams[0], "/src.internal.protobuf.VividService/OpenMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &vividServiceOpenMessageStreamClient{stream}
	return x, nil
}

type VividService_OpenMessageStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type vividServiceOpenMessageStreamClient struct {
	grpc.ClientStream
}

func (x *vividServiceOpenMessageStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vividServiceOpenMessageStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VividServiceServer is the server API for VividService service.
// All implementations must embed UnimplementedVividServiceServer
// for forward compatibility
type VividServiceServer interface {
	OpenMessageStream(VividService_OpenMessageStreamServer) error
	mustEmbedUnimplementedVividServiceServer()
}

// UnimplementedVividServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVividServiceServer struct {
}

func (UnimplementedVividServiceServer) OpenMessageStream(VividService_OpenMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenMessageStream not implemented")
}
func (UnimplementedVividServiceServer) mustEmbedUnimplementedVividServiceServer() {}

// UnsafeVividServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VividServiceServer will
// result in compilation errors.
type UnsafeVividServiceServer interface {
	mustEmbedUnimplementedVividServiceServer()
}

func RegisterVividServiceServer(s grpc.ServiceRegistrar, srv VividServiceServer) {
	s.RegisterService(&VividService_ServiceDesc, srv)
}

func _VividService_OpenMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VividServiceServer).OpenMessageStream(&vividServiceOpenMessageStreamServer{stream})
}

type VividService_OpenMessageStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type vividServiceOpenMessageStreamServer struct {
	grpc.ServerStream
}

func (x *vividServiceOpenMessageStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vividServiceOpenMessageStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VividService_ServiceDesc is the grpc.ServiceDesc for VividService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VividService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "src.internal.protobuf.VividService",
	HandlerType: (*VividServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenMessageStream",
			Handler:       _VividService_OpenMessageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vivid_service.proto",
}
